package pdss5.hs.hdw;

import java.util.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
//import java.awt.List;
import java.io.IOException;
import java.io.InputStream;
import java.security.acl.LastOwnerException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.StringTokenizer;

import org.apache.ibatis.io.Resources;
/*import org.apache.ibatis.io.Resources;*/
import org.apache.ibatis.session.ExecutorType;
import org.apache.ibatis.session.ResultContext;
import org.apache.ibatis.session.ResultHandler;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
/*import org.apache.ibatis.session.SqlSessionFactory;*/
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

public class JavaETLProgram {

	private static String row_cnt;
	private static String err_msg;
	private static long start;
	private static Properties props;
	private static Properties meta_props;
	private static String properties_home = System.getProperty("scheduler.property");
//	private static String properties_home = "C:\\ProjectDev";

	public static void main(String[] args) throws IOException {
//        String resource = XML_HOME + "//mybatis-config.xml";
		File default_file = null;
		String meta_proerties = properties_home + "//meta_properties";
//		String meta_proerties = properties_home + "\\meta_properties.txt";
		String filename = System.getProperty(meta_proerties);
		
		meta_props = new Properties();
		
		filename = meta_proerties;
		String resource = "config/mybatis-config.xml";
		
		default_file = new File(filename);
		
		FileReader fileReader = new FileReader(default_file);
		BufferedReader reader = new BufferedReader(fileReader);
		String line = null;
		
		while((line = reader.readLine()) != null){
			meta_props.put(line.substring(0, line.lastIndexOf("=")) , line.substring(line.indexOf("=")+1));
        }
		
		// Meta(Master Table)접속
		InputStream inputStreamMeta = null;
		try {
			inputStreamMeta = Resources.getResourceAsStream(resource);
		} catch (IOException e) {
			e.printStackTrace();
		}

		final SqlSessionFactory sqlSessionFactoryMeta = new SqlSessionFactoryBuilder().build(inputStreamMeta, meta_props);

		final SqlSession sessionMeta = sqlSessionFactoryMeta.openSession(true);

		Map m = new HashMap();
		m.put("EXE_GRP_ID", "1"); // Connection DB parameter input

		List<DBConnectionVO> list = sessionMeta.selectList("getConnectionList", m); // source connection 정보 List로 받기
		start = System.currentTimeMillis(); // start_time 표현
		Date s_time = new Date(start); // start_time date 형식으로 변환
		
		// source db connection 정보들 for문으로 루프
		for (DBConnectionVO dto : list) {			

			// connection 정보 input
			props = new Properties();
			props.put("driver", dto.getSrc_driver());
			props.put("url", dto.getSrc_url());
			props.put("username", dto.getSrc_username());
			props.put("password", dto.getSrc_password());

			System.out.println("props = " + props);
			// connection 정보 표시
			System.out.println("==========================================================");
			String db_connect;
			db_connect = "db_driver=" + dto.getSrc_driver() + "\n" + "db_url="
					+ dto.getSrc_url() + "\n" + "db_username="
					+ dto.getSrc_username() + "\n" + "db_password="
					+ dto.getSrc_password();
			System.out.println(db_connect);
			System.out.println("==========================================================");

			System.out.println("props = " + props);
			
			// Source DB 접속
			InputStream inputStreamSource = null;
			try {
				inputStreamSource = Resources.getResourceAsStream(resource);
			} catch (IOException e) {
				e.printStackTrace();
			}

			// source db 정보 mybatis-config.xml로 mapping
			final SqlSessionFactory sqlSessionFactorySource = new SqlSessionFactoryBuilder().build(inputStreamSource, props); // source db 정보
			final SqlSession sessionSource = sqlSessionFactorySource.openSession(ExecutorType.BATCH, true);		
			
			Map m_1 = new HashMap();
			Map m_2 = new HashMap();
			m_1.put("EXE_GRP_ID", "1"); // master table parameter값 input
			m_1.put("SRC_TBL_OWNR_ID", dto.getSrc_username()); // master table parameter값 input

			List<MasterTableVO> master = sessionMeta.selectList("getMetaTableList01", m_1); // meta master table 정보 List로 받기

			// source db connection 정보들 for문으로 루프
			for (final MasterTableVO ms : master) {
				
				// Target DB 접속
				InputStream inputStreamTarget = null;
				try {
					inputStreamTarget = Resources.getResourceAsStream(resource);
				} catch (IOException e) {
					e.printStackTrace();
				}

				SqlSessionFactory sqlSessionFactoryTarget = new SqlSessionFactoryBuilder().build(inputStreamTarget, "targetdb");
				final SqlSession sessionTarget = sqlSessionFactoryTarget.openSession(ExecutorType.BATCH, false);

				m_2.put("SRC_TBL_ID", ms.getSrc_tbl_id());
				m_2.put("SQL_CONDTN_TXT", ms.getSql_condtn_txt());

				sessionSource.select("pdss5.hs.hdw.ETLSourceMapper.getSourceTableList", m_2,new 
						ResultHandler() 
				{
					public void handleResult(ResultContext context) {
						Map<String, Object> source_map = (Map<String, Object>) context.getResultObject();
						source_map.put("TGT_TBL_ID", ms.getTgt_tbl_id());
						source_map.put("EXTRCT_COL_ID",	ms.getExtrct_col_id());
						source_map.put("EXTRCT_COL", ms.getExtrct_col());
						sessionTarget.insert("pdss5.hs.hdw.ETLTargetMapper.insertTargetTable", source_map); //Target insert
						}
					});
				sessionTarget.commit();
				sessionTarget.close();

				try {
					inputStreamTarget.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			props.clear();

			try {

				inputStreamSource.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			sessionSource.close();
		}
		
		long end = System.currentTimeMillis(); // end_time 표현
		Date e_time = new Date(end); // end_time date 형식으로 변환
		System.out.println("ELAPSED_DTM=" + (end - start) / 1000);
		
		sessionMeta.close();
		try {		
			inputStreamMeta.close();			
		} catch (IOException e) {
			e.printStackTrace();
		}		
	}
}
